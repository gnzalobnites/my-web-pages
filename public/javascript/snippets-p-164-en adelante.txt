p 164 en adelante

var x = document.getElementById('demo');
x.onclick = function () {
  document.body.innerHTML = Date();
}
----
&lt;body onload="doSomething()"&gt;
----
window.onload = function() {
  //some code
}
----
&lt;input type="text" id="name" onchange="change()"&gt;

&lt;script&gt; 
function change() {
    var x = document.getElementById('name');
    x.value = x.value.toUpperCase();
}
&lt;/script&gt;
----
element.addEventListener(event, function, useCapture);
----
element.addEventListener("click", myFunction);
element.addEventListener("mouseover", myFunction);

function myFunction() {
  alert("Hello World!");
}
----
element.removeEventListener("mouseover", myFunction);
----
&lt;button id="demo"&gt;Start&lt;/button&gt;

&lt;script&gt;
  var btn = document.getElementById("demo");
  btn.addEventListener("click", myFunction);

  function myFunction() {
    alert(Math.random());
    btn.removeEventListener("click", myFunction);
  }
&lt;/script&gt;
----
addEventListener(event, function, useCapture)

//Capturing propagation
elem1.addEventListener("click", myFunction, true); 

//Bubbling propagation
elem2.addEventListener("click", myFunction, false);
----
&lt;div&gt;
  &lt;button&gt; Prev &lt;/button&gt;
  &lt;img src="http://www.sololearn.com/uploads/slider/1.jpg" width="200px" height="100px" /&gt;
  &lt;button&gt; Next &lt;/button&gt;
&lt;/div&gt;
----
var images = [
  "http://www.sololearn.com/uploads/slider/1.jpg", 
  "http://www.sololearn.com/uploads/slider/2.jpg", 
  "http://www.sololearn.com/uploads/slider/3.jpg"
];
----
&lt;div&gt;
  &lt;button onclick="prev()"&gt; Prev &lt;/button&gt;
  &lt;img id="slider" src="http://www.sololearn.com/uploads/slider/1.jpg" width="200px" height="100px"/&gt;
  &lt;button onclick="next()"&gt; Next &lt;/button&gt;
&lt;/div&gt;
----
var images = [
  'http://www.sololearn.com/uploads/slider/1.jpg', 
  'http://www.sololearn.com/uploads/slider/2.jpg', 
  'http://www.sololearn.com/uploads/slider/3.jpg'
];
var num = 0;
function next() {
  var slider = document.getElementById('slider');
  num++;
  if(num &gt;= images.length) {
    num = 0;
  }
  slider.src = images[num];
}
function prev() {
  var slider = document.getElementById('slider');
  num--;
  if(num &lt; 0) {
    num = images.length-1;
  }
  slider.src = images[num];
}
----
&lt;form onsubmit="return validate()" method="post"&gt;
  Number: &lt;input type="text" name="num1" id="num1" /&gt;
  &lt;br /&gt;
  Repeat: &lt;input type="text" name="num2" id="num2" /&gt;
  &lt;br /&gt;
  &lt;input type="submit" value="Submit" /&gt;
&lt;/form&gt;
----
function validate() {
  var n1 = document.getElementById('num1');
  var n2 = document.getElementById('num2');
  if(n1.value != '' &amp;&amp; n2.value != '') {
    if(n1.value == n2.value) {
      return true;
    }
  }
  alert("The values should be equal and not blank");
  return false;
}
----
var a = 10;
const b = 'hello';
let c = true;
----
if (true) {
  let name = 'Jack';
}
alert(name); //Genera un error 
----
function varTest() {
  var x = 1;
  if (true) {
    var x = 2;  // same variable
    console.log(x);  // 2
  }
  console.log(x);  // 2
}

function letTest() {
  let x = 1;
  if (true) {
    let x = 2;  // different variable
    console.log(x);  // 2
  }
  console.log(x);  // 1
}
----
for (let i = 0; i &lt; 3; i++) {
  document.write(i);
}

const a = 'Hello';
a = 'Bye';
----
let name = 'David';
let msg = 'Welcome ' + name + '!';
console.log(msg);

let name = 'David';
let msg = `Welcome ${name}!`;
console.log(msg);

let a = 8;
let b = 34;
let msg = `The sum is ${a+b}`;
console.log(msg);

Bucles y funciones en ES6

let arr = [1, 2, 3];
for (let k = 0; k &lt; arr.length; k++) {
    console.log(arr[k]);
}

let obj = {a: 1, b: 2, c: 3};
for (let v in obj) {
    console.log(v);
}
----
let list = ["x", "y", "z"];
for (let val of list) {
  console.log(val);
}
----
for (let ch of "Hello") {
  console.log(ch);
}
----
function add(x, y) {
  var sum = x+y;  
  console.log(sum);
}
add(35, 7);

const add = (x, y) =&gt; {
  let sum = x + y;  
  console.log(sum);
}
add(35, 7);

const greet = x =&gt; "Welcome " + x;
----
alert(greet("David"));

const x = () =&gt; alert("Hi");
x();

var arr = [2, 3, 7, 8];

arr.forEach(function(el) {
  console.log(el * 2);
});

const arr = [2, 3, 7, 8];

arr.forEach(v =&gt; {
  console.log(v * 2);
});

function test(a, b = 3, c = 42) {
  return a + b + c;
}
console.log(test(5));

const test = (a, b = 3, c = 42) =&gt; {
  return a + b + c;
}
console.log(test(5)); //50

@Objetos en ES6

let tree = {
  height: 10,
  color: 'green',
  grow() {
    this.height += 2;
  }
};
tree.grow();
console.log(tree.height); // 12
----
let height = 5;
let health = 100;

let athlete = {
  height,
  health
};
----
var a = {x: 1, x: 2, x: 3, x: 4};
----
let prop = 'name';
let id = '1234';
let mobile = '08923';

let user = {
  [prop]: 'Jack',
  [`user_${id}`]: `${mobile}`
};

console.log(user.name); // Jack
console.log(user.user_1234); // 08923

var i = 0;
var a = {
  ['foo' + ++i]: i,
  ['foo' + ++i]: i,
  ['foo' + ++i]: i
};

console.log(a.foo1); // 1
console.log(a.foo2); // 2
console.log(a.foo3); // 3

var param = 'size';
var config = {
    [param]: 12,
    ['mobile' + param.charAt(0).toUpperCase() + param.slice(1)]: 4
};
console.log(config.mobileSize); // 4

let person = {
  name: 'Jack',
  age: 18,
  sex: 'male'
};
let student = {
  name: 'Bob',
  age: 20,
  xp: '2'
};
let newStudent = Object.assign({}, person, student);
----
console.log(newStudent.name); // Bob
console.log(newStudent.age); // 20
console.log(newStudent.sex); // male
console.log(newStudent.xp); // 2

let person = {
  name: 'Jack',
  age: 18
};

let newPerson = person;
newPerson.name = 'Bob';

console.log(person.name); // Bob
console.log(newPerson.name); // Bob

let person = {
  name: 'Jack',
  age: 18
};

let newPerson = Object.assign({}, person);
newPerson.name = 'Bob';

console.log(person.name); // Jack
console.log(newPerson.name); // Bob
----
let person = {
  name: 'Jack',
  age: 18
};

let newPerson = Object.assign({}, person, {name: 'Bob'});

console.log(newPerson.name); // Bob

@Desestructuraci√≥n en ES6

let arr = ['1', '2', '3'];
let [one, two, three] = arr;

console.log(one); // 1
console.log(two); // 2
console.log(three); // 3
----
let a = () =&gt; {
  return [1, 3, 2];
};

let [one, , two] = a();

console.log(one); // 1
console.log(two); // 2
----
let a, b, c = 4, d = 8;
[a, b = 6] = [2];
console.log(a); // 2
console.log(b); // 6

[c, d] = [d, c];
console.log(c); // 8
console.log(d); // 4

let obj = {h:100, s: true};
let {h, s} = obj;

console.log(h);
console.log(s);

let a, b;
({a, b} = {a: 'Hello ', b: 'Jack'});

console.log(a + b);

let {a, b} = {a: 'Hello ', b: 'Jack'};
console.log(a + b);
----
var o = {h: 42, s: true};
var {h: foo, s: bar} = o;

//console.log(h); // Error
console.log(foo); // 42
----
var obj = {id: 42, name: "Jack"};

let {id = 10, age = 20} = obj;

console.log(id); // 42
console.log(age); // 20
----
@Rest y spread

function containsAll(arr) {
  for (let k = 1; k &lt; arguments.length; k++) {
    let num = arguments[k];
    if (arr.indexOf(num) === -1) {
      return false;
    }
  }
  return true;
}
let x = [2, 4, 6, 7];
console.log(containsAll(x, 2, 4, 7));
console.log(containsAll(x, 6, 4, 9));
----
function containsAll(arr, ...nums) {
  for (let num of nums) {
    if (arr.indexOf(num) === -1) {
      return false;
    }
  }
  return true;
}
-----
function myFunction(w, x, y, z) {
  console.log(w + x + y + z);
}
var args = [1, 2, 3];
myFunction.apply(null, args.concat(4));

const myFunction = (w, x, y, z) =&gt; {
  console.log(w + x + y + z);
};
let args = [1, 2, 3];
myFunction(...args, 4);
----
var dateFields = [1970, 0, 1];  // 1 Jan 1970
var date = new Date(...dateFields);
console.log(date);

var arr = ["One", "Two", "Five"];

arr.splice(2, 0, "Three");
arr.splice(3, 0, "Four");
console.log(arr);

let newArr = ['Three', 'Four']; 
let arr = ['One', 'Two', ...newArr, 'Five'];
console.log(arr);
----
const obj1 = { foo: 'bar', x: 42 };
const obj2 = { foo: 'baz', y: 5 };

const clonedObj = {...obj1}; // { foo: "bar", x: 42 }
const mergedObj = {...obj1, ...obj2}; // { foo: "baz", x: 42, y: 5 }

const obj1 = { foo: 'bar', x: 42 };
const obj2 = { foo: 'baz', y: 5 };
const merge = (...objects) =&gt; ({...objects});

let mergedObj = merge(obj1, obj2);
// { 0: { foo: 'bar', x: 42 }, 1: { foo: 'baz', y: 5 } }

let mergedObj2 = merge({}, obj1, obj2);
// { 0: {}, 1: { foo: 'bar', x: 42 }, 2: { foo: 'baz', y: 5 } }

@Clases en ES6

class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
}

const square = new Rectangle(5, 5);
const poster = new Rectangle(2, 3); 

var Square = class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
};
----
var Square = class {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }   
};
----
class Rectangle {
  constructor(height, width) {
    this.height = height;
    this.width = width;
  }
  get area() {
    return this.calcArea();
  }
  calcArea() {
    return this.height * this.width;
  }
}
const square = new Rectangle(5, 5);
console.log(square.area); // 25
----
class Point {
  constructor(x, y) {
    this.x = x;
    this.y = y;
  }
  static distance(a, b) {
    const dx = a.x - b.x;
    const dy = a.y - b.y;
    return Math.hypot(dx, dy);
  }
}
const p1 = new Point(7, 2);
const p2 = new Point(3, 8);

console.log(Point.distance(p1, p2));
----
class Animal {
  constructor(name) {
    this.name = name;
  }
  speak() {
    console.log(this.name + ' makes a noise.');
  }
}

class Dog extends Animal {
  speak() {
    console.log(this.name + ' barks.');
  }
}
let dog = new Dog('Rex');
dog.speak(); // Rex barks.
----
class Animal {
  constructor(name) {
    this.name = name;
  }
  speak() {
    console.log(this.name + ' makes a noise.');
  }
}

class Dog extends Animal {
  speak() {
    super.speak(); // Super
    console.log(this.name + ' barks.');
  }
}

let dog = new Dog('Rex');
dog.speak();
// Rex makes a noise.
// Rex barks.
----
@Map y set

let map = new Map([['k1', 'v1'], ['k2', 'v2']]);

console.log(map.size); // 2

let map = new Map();

map.set('k1', 'v1').set('k2', 'v2');

console.log(map.get('k1')); // v1

console.log(map.has('k2')); // true

for (let kv of map.entries())
  console.log(kv[0] + " : " + kv[1]);
----
let set = new Set([1, 2, 4, 2, 59, 9, 4, 9, 1]);

console.log(set.size); // 5

let set = new Set();
set.add(5).add(9).add(59).add(9);

console.log(set.has(9));

for (let v of set.values())
    console.log(v);
----
@M√°s sobre ES6

setTimeout(function() {
  console.log("Work 1");
  setTimeout(function() {
    console.log("Work 2");
  }, 1000);
}, 1000);
console.log("End");

new Promise (function(resolve, reject) {
  // Work
  if (success)
      resolve(result);
  else
      reject(Error("failure"));
});

function asyncFunc(work) {
  return new Promise(function(resolve, reject) {
    if (work === "")
      reject(Error("Nothing"));
    setTimeout(function() {
      resolve(work);
    }, 1000);
  });
}
----
asyncFunc("Work 1") // Task 1
.then(function(result) {
  console.log(result);
  return asyncFunc("Work 2"); // Task 2
}, function(error) {
    console.log(error);
})
.then(function(result) {
  console.log(result);
}, function(error) {
  console.log(error);
});
console.log("End");
----
let myIterableObj = { 
  [Symbol.iterator] : function* () {
    yield 1; yield 2; yield 3;
  }
};
console.log([...myIterableObj]); // [ 1, 2, 3 ]
----
function* idMaker() {
  let index = 0;
  while (index &lt; 5)
    yield index++;
}
var gen = idMaker();
console.log(gen.next().value);
console.log(gen.next().value);
console.log(gen.next().value);
console.log(gen.next().value);
console.log(gen.next().value);
// Try to add one more console.log, just like the above see what happens.
----
const arr = ['0', '1', '4', 'a', '9', 'c', '16'];
const my_obj = {
  [Symbol.iterator]: function*() {
    for(let index of arr) {
      yield `${index}`;
    }
  }
};

const all = [...my_obj] /* Here you can replace the '[...my_obj]' with 'arr'. */
  .map(i =&gt; parseInt(i, 10))
  .map(Math.sqrt)
  .filter((i) =&gt; i &lt; 5) /* try changing the value of 5 to 4 see what happens.*/
  .reduce((i, d) =&gt; i + d); /* comment this line while you are changing the value of the line above */
console.log(all);
----
// lib/math.js
export let sum = (x, y) =&gt; { return x + y; }
export let pi = 3.14;

// app.js
import * as math from "lib/math"
console.log(`2p = + ${math.sum(math.pi, math.pi)}`)

let res = [4, 5, 1, 8, 2, 0].filter(function (x) {
  return x &gt; 3;
})[0];
----
console.log(res);

let res = [4, 5, 1, 8, 2, 0].find(x =&gt; x &gt; 3);

console.log(res);

let res = [4, 5, 1, 8, 2, 0].findIndex(x =&gt; x &gt; 3);

console.log(res);

console.log(Array(3 + 1).join("foo"));

console.log("foo".repeat(3));

console.log("SoloLearn".indexOf("Solo") === 0); // true
console.log("SoloLearn".indexOf("Solo") === (4 - "Solo".length)); // true
console.log("SoloLearn".indexOf("loLe") !== -1); // true
console.log("SoloLearn".indexOf("olo", 1) !== -1); // true
console.log("SoloLearn".indexOf("olo", 2) !== -1); // false

console.log("SoloLearn".startsWith("Solo", 0)); // true
console.log("SoloLearn".endsWith("Solo", 4)); // true
console.log("SoloLearn".includes("loLe")); // true
console.log("SoloLearn".includes("olo", 1)); // true
console.log("SoloLearn".includes("olo", 2)); // false







